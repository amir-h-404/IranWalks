// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(IranWalksDbContext))]
    [Migration("20250305183534_Seeding data for Difficulties and Regions")]
    partial class SeedingdataforDifficultiesandRegions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c0f0e32-38ee-47d0-88e4-acbd9062e8da"),
                            Name = "Easy"
                        },
                        new
                        {
                            Id = new Guid("bb1e5d6f-76d1-4573-9e12-a201e5d576be"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("5cbb6365-1d33-4365-8e98-0d84bef71cb3"),
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("API.Models.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5258c24f-5731-482d-a30a-551d5736987e"),
                            Code = "GRN",
                            Name = "Gorgan",
                            RegionImageUrl = "https://cdn.pixabay.com/photo/2016/11/29/05/45/aerial-1867092_960_720.jpg"
                        },
                        new
                        {
                            Id = new Guid("6816a60c-9e51-4218-ae33-41af66a29d2f"),
                            Code = "BJD",
                            Name = "Birjand"
                        },
                        new
                        {
                            Id = new Guid("54193e0d-36b0-4763-81aa-98a09b5a2345"),
                            Code = "THN",
                            Name = "Tehran",
                            RegionImageUrl = "https://cdn.pixabay.com/photo/2016/11/29/05/45/aerial-1867092_960_720.jpg"
                        },
                        new
                        {
                            Id = new Guid("f3b3b3b3-1b3b-4b3b-8b3b-3b3b3b3b3b3b"),
                            Code = "SHR",
                            Name = "Shiraz",
                            RegionImageUrl = "https://cdn.pixabay.com/photo/2016/11/29/05/45/aerial-1867092_960_720.jpg"
                        },
                        new
                        {
                            Id = new Guid("b3b3b3b3-3b3b-3b3b-3b3b-3b3b3b3b3b3b"),
                            Code = "KRM",
                            Name = "Kerman"
                        },
                        new
                        {
                            Id = new Guid("a3a3a3a3-3a3a-3a3a-3a3a-3a3a3a3a3a3a"),
                            Code = "RAS",
                            Name = "Rasht",
                            RegionImageUrl = "https://cdn.pixabay.com/photo/2016/11/29/05/45/aerial-1867092_960_720.jpg"
                        });
                });

            modelBuilder.Entity("API.Models.Domain.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalkImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("API.Models.Domain.Walk", b =>
                {
                    b.HasOne("API.Models.Domain.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });
#pragma warning restore 612, 618
        }
    }
}
